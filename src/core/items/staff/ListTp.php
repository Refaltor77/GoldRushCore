<?php

namespace core\items\staff;

use core\api\form\elements\Button;
use core\api\form\MenuForm;
use core\cooldown\BasicCooldown;
use core\Main;
use core\messages\Messages;
use core\player\CustomPlayer;
use customiesdevs\customies\item\component\HandEquippedComponent;
use customiesdevs\customies\item\CreativeInventoryInfo;
use customiesdevs\customies\item\ItemComponents;
use customiesdevs\customies\item\ItemComponentsTrait;
use pocketmine\block\Block;
use pocketmine\entity\Entity;
use pocketmine\event\entity\EntityDamageByEntityEvent;
use pocketmine\item\Item;
use pocketmine\item\ItemIdentifier;
use pocketmine\item\ItemUseResult;
use pocketmine\math\Vector3;
use pocketmine\player\Player;
use pocketmine\Server;
use pocketmine\utils\TextFormat;

class ListTp extends Item implements ItemComponents
{
    use ItemComponentsTrait;

    public function __construct(ItemIdentifier $identifier)
    {
        $name = 'Tp Liste';


        $inventory = new CreativeInventoryInfo(
            CreativeInventoryInfo::CATEGORY_EQUIPMENT,
            CreativeInventoryInfo::GROUP_ORE,
        );

        parent::__construct($identifier, $name);

        $this->initComponent('iron_ingot', $inventory);
        $this->addComponent(new HandEquippedComponent(true));

        $this->setLore([
            "§6---",
            "§l§eDescription:§r§f liste des joueurs",
            "§6---",
            "§eRareté: " . TextFormat::GOLD . "GURIDO LE MEC A REFA"
        ]);
    }

    public function onInteractBlock(Player $player, Block $blockReplace, Block $blockClicked, int $face, Vector3 $clickVector, array &$returnedItems): ItemUseResult
    {
        if (!BasicCooldown::validChest($player)) return ItemUseResult::FAIL();
        $btn = [];
        foreach (Server::getInstance()->getOnlinePlayers() as $pl) {
            $btn[] = new Button($pl->getName());
        }
        $player->sendForm(new MenuForm("Liste tp", "Liste des joueurs téléportations", $btn, function (Player $player, Button $button): void {
            $name = $button->getText();
            $playerTarget = Server::getInstance()->getPlayerExact($name);
            if ($playerTarget instanceof Player) {
                $player->teleport($playerTarget->getPosition());
            } else $player->sendMessage(Messages::message("§cLe joueur n'est pas en ligne."));
        }));
        return parent::onInteractBlock($player, $blockReplace, $blockClicked, $face, $clickVector, $returnedItems); // TODO: Change the autogenerated stub
    }

    public function onAttackEntity(Entity $victim, array &$returnedItems): bool
    {
        $damager = $victim->getLastDamageCause();
        if ($damager instanceof EntityDamageByEntityEvent) {
            $damager = $damager->getDamager();
            if ($damager instanceof CustomPlayer) {
                $this->onInteractEntity($damager, $victim, new Vector3(0, 0, 0));
            }
        }
        return false;
    }

    public function onInteractEntity(Player $player, Entity $entity, Vector3 $clickVector): bool
    {
        if (!Main::getInstance()->getStaffManager()->isInStaffMode($player) && !Server::getInstance()->isOp($player->getName())) return false;
        if ($entity instanceof CustomPlayer) {
            $btn = [];
            foreach (Server::getInstance()->getOnlinePlayers() as $pl) {
                $btn[] = new Button($pl->getName());
            }
            $player->sendForm(new MenuForm("Liste tp", "Liste des joueurs téléportations", $btn, function (Player $player, Button $button): void {
                $name = $button->getText();
                $playerTarget = Server::getInstance()->getPlayerExact($name);
                if ($playerTarget instanceof Player) {
                    $player->teleport($playerTarget->getPosition());
                } else $player->sendMessage(Messages::message("§cLe joueur n'est pas en ligne."));
            }));
        }
        return false;
    }
}